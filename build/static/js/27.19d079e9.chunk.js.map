{"version":3,"sources":["views/tuck-shop/ecommerce/checkout/steps/Cart.js","views/tuck-shop/ecommerce/checkout/index.js","views/tuck-shop/student/store/action/index.js"],"names":["Cart","props","products","deleteCartItem","stepper","dispatch","history","addToWishlist","deleteWishlistItem","getCartItems","useHistory","amount","reduce","n","useState","selectedOption","setSelectedOption","studentId","orderData","setOrderData","useEffect","getAllData","value","students","store","useSelector","state","onSubmit","event","errors","a","preventDefault","console","log","length","body","JSON","stringify","apiRequest","url","method","response","data","status","swal","message","deleteAllCartItem","push","error","className","map","item","Card","to","id","src","image","alt","name","CardBody","Array","fill","listItem","index","classnames","rating","qty","min","max","productId","size","style","width","height","price","toLocaleString","hasFreeShipping","CardText","Badge","color","pill","Button","onClick","FormGroup","Label","for","theme","selectThemeColors","classNamePrefix","defaultValue","options","allData","student","label","firstName","lastName","otherName","wallet","isClearable","onChange","Ripple","block","type","Checkout","ref","useRef","setStepper","useDispatch","ecommerce","steps","title","subtitle","icon","content","cart","breadCrumbTitle","breadCrumbParent","breadCrumbActive","instance","el","linear","getFilteredData","params","q","perPage","number","page","level","group","queryLowered","toLowerCase","filteredData","filter","includes","toString","class","paginateArray","totalPages","getStudentDetails","studentDetails","creditOrDebitStudentWallet","narration","deleteStudent","getFilteredUserTransactions","userTransactions","transaction","transactionId","moment","createdAt","format","getFilteredStudentOrders","orders","order","orderNumber","updateStudentStatus"],"mappings":"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","file":"static/js/27.19d079e9.chunk.js","sourcesContent":["// ** React Imports\nimport { Link, useHistory } from 'react-router-dom'\nimport { useState, useEffect } from 'react'\nimport { useSelector } from 'react-redux'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { X, Heart, Star } from 'react-feather'\nimport Select from 'react-select'\nimport { Card, CardBody, CardText, Button, Badge, FormGroup, Label, InputGroup, InputGroupAddon, Input, InputGroupText } from 'reactstrap'\nimport { AvForm, AvInput } from 'availity-reactstrap-validation-safe'\nimport { swal, apiRequest, selectThemeColors } from '@utils'\n\n// ** Custom Components\nimport NumberInput from '@components/number-input'\nimport { getAllData } from '../../../student/store/action'\nimport { deleteAllCartItem } from '../../store/actions'\n\nconst Cart = props => {\n  // ** Props\n  const { products, stepper, deleteCartItem, dispatch, addToWishlist, deleteWishlistItem, getCartItems } = props\n\n  const history = useHistory()\n\n  // ** Function to convert Date\n  const formatDate = (value, formatting = { month: 'short', day: 'numeric', year: 'numeric' }) => {\n    if (!value) return value\n    return new Intl.DateTimeFormat('en-US', formatting).format(new Date(value))\n  }\n\n  // ** Funciton Function to toggle wishlist item\n  const handleWishlistClick = (id, val) => {\n    if (val) {\n      dispatch(deleteWishlistItem(id))\n    } else {\n      dispatch(addToWishlist(id))\n    }\n    dispatch(getCartItems())\n  }\n\n  // ** Render cart items\n  const renderCart = () => {\n    return products.map(item => {\n      return (\n        <Card key={item.name} className='ecommerce-card'>\n          <div className='item-img'>\n            <Link to={`/apps/ecommerce/product/${item.id}`}>\n              <img className='img-fluid' src={item.image} alt={item.name} />\n            </Link>\n          </div>\n          <CardBody>\n            <div className='item-name'>\n              <h6 className='mb-0'>\n                <Link to={`/apps/ecommerce/product/${item.id}`}>{item.name}</Link>\n              </h6>\n              {/* <span className='item-company'>\n                By\n                <a className='ml-25' href='/' onClick={e => e.preventDefault()}>\n                  {item.brand}\n                </a>\n              </span> */}\n              <div className='item-rating'>\n                <ul className='unstyled-list list-inline'>\n                  {new Array(5).fill().map((listItem, index) => {\n                    return (\n                      <li key={index} className='ratings-list-item mr-25'>\n                        <Star\n                          className={classnames({\n                            'filled-star': index + 1 <= item.rating,\n                            'unfilled-star': index + 1 > item.rating\n                          })}\n                        />\n                      </li>\n                    )\n                  })}\n                </ul>\n              </div>\n            </div>\n            {/* <span className='text-success mb-1'>In Stock</span> */}\n            <div className='item-quantity'>\n              <span className='quantity-title mr-50'>Qty</span>\n              <NumberInput value={item.qty} min={1} max={10} dispatch={dispatch} productId={item.id} size='sm' style={{ width: '7rem', height: '2.15rem' }} />\n            </div>\n            {/* <div className='delivery-date text-muted'>Delivery by, {formatDate(item.shippingDate)}</div>\n            <span className='text-success'>\n              {item.discountPercentage}% off {item.offers} offers Available\n            </span> */}\n          </CardBody>\n          <div className='item-options text-center'>\n            <div className='item-wrapper'>\n              <div className='item-cost'>\n                <h4 className='item-price'>₦{(item.price * item.qty).toLocaleString()}</h4>\n                {item.hasFreeShipping ? (\n                  <CardText className='shipping'>\n                    <Badge color='light-success' pill>\n                      Free Shipping\n                    </Badge>\n                  </CardText>\n                ) : null}\n              </div>\n            </div>\n            <Button className='mt-1 remove-wishlist' color='light' onClick={() => dispatch(deleteCartItem(item.id))}>\n              <X size={14} className='mr-25' />\n              <span>Remove</span>\n            </Button>\n            {/* <Button\n              className='btn-cart'\n              color='primary'\n              onClick={() => handleWishlistClick(item.id, item.isInWishlist)}\n            >\n              <Heart\n                size={14}\n                className={classnames('mr-25', {\n                  'fill-current': item.isInWishlist\n                })}\n              />\n              <span className='text-truncate'>Wishlist</span>\n            </Button> */}\n          </div>\n        </Card>\n      )\n    })\n  }\n\n  const amount = products.reduce((n, {amount}) => n + amount, 0)\n  const [selectedOption, setSelectedOption] = useState('')\n  const [orderData, setOrderData] = useState({\n    amount,\n    products,\n    studentId: selectedOption\n  })\n  \n\n  // ** Get data on mount\n  useEffect(() => {\n    dispatch(getAllData())\n    setOrderData({...orderData, studentId: selectedOption.value})\n  }, [dispatch, selectedOption])\n\n  const store = useSelector(state => state.students)\n\n  const renderStudents = (students) => {\n    console.log(students)\n    return students.map(student => {\n      return {value: student.id, label: `${student.firstName} ${student.lastName} ${student.otherName} (₦${student.wallet.toLocaleString()})`}\n    })\n  }\n  \n  // ** Function to handle form submit\n  const onSubmit = async (event, errors) => {\n    event.preventDefault()\n    console.log({errors})\n    if (errors && !errors.length) {\n      console.log({orderData})\n      const body = JSON.stringify(orderData)\n      try {\n        const response = await apiRequest({url:'/orders/create', method:'POST', body}, dispatch)\n        console.log({response})\n        if (response.data.status) {\n            swal('Great job!', response.data.message, 'success')\n            dispatch(getAllData())\n            dispatch(deleteAllCartItem())\n            setOrderData({\n              amount,\n              products,\n              studentId: selectedOption?.value\n            })\n            history.push(`/apps/ecommerce/shop`)\n        } else {\n          swal('Oops!', response.data.message, 'error')\n          dispatch(deleteAllCartItem())\n          setOrderData({\n            amount,\n            products,\n            studentId: selectedOption?.value\n          })\n          history.push(`/apps/ecommerce/shop`)\n        }\n      } catch (error) {\n        console.error({error})\n      }\n    }\n  }\n\n  return (\n    <div className='list-view product-checkout'>\n      <div className='checkout-items'>{products.length ? renderCart() : <h4>Your cart is empty</h4>}</div>\n      <div className='checkout-options'>\n        <Card>\n          <CardBody>\n            <AvForm onSubmit={onSubmit}>\n              <FormGroup>\n                <Label for='studentId'>Student</Label>\n                <Select\n                  theme={selectThemeColors}\n                  className='react-select'\n                  classNamePrefix='select'\n                  defaultValue={selectedOption}\n                  options={renderStudents(store.allData)}\n                  isClearable={false}\n                  // value={orderData.studentId}\n                  onChange={setSelectedOption}\n                />\n                {/* <AvInput \n                  type='select' \n                  id='studentId' \n                  name='studentId' \n                  value={orderData.studentId}\n                  onChange={e => setOrderData({...orderData, studentId: e.target.value})}\n                  required\n                >\n                  <option value=''>Select Student</option>\n                  {renderStudents(store.allData)}\n                </AvInput> */}\n              </FormGroup> \n            \n              <hr />\n              <div className='price-details'>\n                <ul className='list-unstyled'>\n                  <li className='price-detail'>\n                    <div className='detail-title detail-total'>Total</div>\n                    <div className='detail-amt font-weight-bolder'>₦{amount.toLocaleString()}</div>\n                  </li>\n                </ul>\n                <Button.Ripple\n                  color='primary'\n                  classnames='btn-next place-order'\n                  block\n                  type='submit'\n                  // disabled={!products.length}\n                  // onClick={onSubmit}\n                >\n                  Place Order\n                </Button.Ripple>\n              </div>\n            </AvForm>\n          </CardBody>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\nexport default Cart\n","// ** React Imports\nimport { Fragment, useEffect, useRef, useState } from 'react'\n\n// ** Custom Components\nimport Wizard from '@components/wizard'\nimport BreadCrumbs from '@components/breadcrumbs'\n\n// ** Steps\nimport Cart from './steps/Cart'\nimport Address from './steps/Address'\nimport Payment from './steps/Payment'\n\n// ** Third Party Components\nimport { ShoppingCart, Home, CreditCard } from 'react-feather'\n\n// ** Store & Actions\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getCartItems, deleteCartItem, deleteWishlistItem, addToWishlist } from '../store/actions'\n\n// ** Styles\nimport '@styles/base/pages/app-ecommerce.scss'\n\nconst Checkout = () => {\n  // ** Ref & State\n  const ref = useRef(null)\n  const [stepper, setStepper] = useState(null)\n\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.ecommerce)\n\n  // ** Get Cart Items on mount\n  useEffect(() => {\n    dispatch(getCartItems())\n  }, [])\n\n  const steps = [\n    {\n      id: 'cart',\n      title: 'Cart',\n      subtitle: 'Your Cart Items',\n      icon: <ShoppingCart size={18} />,\n      content: (\n        <Cart\n          stepper={stepper}\n          dispatch={dispatch}\n          products={store.cart}\n          getCartItems={getCartItems}\n          addToWishlist={addToWishlist}\n          deleteCartItem={deleteCartItem}\n          deleteWishlistItem={deleteWishlistItem}\n        />\n      )\n    }\n    // {\n    //   id: 'Address',\n    //   title: 'Address',\n    //   subtitle: 'Enter Your Address',\n    //   icon: <Home size={18} />,\n    //   content: <Address stepper={stepper} />\n    // },\n    // {\n    //   id: 'payment',\n    //   title: 'Payment',\n    //   subtitle: 'Select Payment Method',\n    //   icon: <CreditCard size={18} />,\n    //   content: <Payment stepper={stepper} />\n    // }\n  ]\n\n  return (\n    <Fragment>\n      <BreadCrumbs breadCrumbTitle='Checkout' breadCrumbParent='eCommerce' breadCrumbActive='Checkout' />\n      <Wizard\n        ref={ref}\n        steps={steps}\n        className='checkout-tab-steps'\n        instance={el => setStepper(el)}\n        options={{\n          linear: false\n        }}\n      />\n    </Fragment>\n  )\n}\n\nexport default Checkout\n","import { paginateArray, sortCompare, apiRequest, swal } from '@utils'\nimport moment from 'moment'\n\nexport const apiUrl = process.env.REACT_APP_API_ENDPOINT\n\n// ** Get all User Data\nexport const getAllData = () => {\n  return async dispatch => {\n    const response = await apiRequest({ url: '/students', method: 'GET' }, dispatch)\n    if (response && response.data.data && response.data.status) {\n      await dispatch({\n        type: 'GET_ALL_DATA',\n        data: response.data.data\n      })\n    } else {\n      console.log(response)\n      swal('Oops!', 'Something went wrong.', 'error')\n    }\n  }\n}\n\n// All Users Filtered Data\nexport const getFilteredData = (students, params) => {\n  return async dispatch => {\n    const { q = '', perPage = 10, number = '', page = 1, status = null, className = null, level = null, group = null } = params\n\n    /* eslint-disable  */\n    const queryLowered = q.toLowerCase()\n    const filteredData = students.filter(\n      student =>\n        (student.studentId.toLowerCase().includes(queryLowered) || student.firstName.toLowerCase().includes(queryLowered) || student.lastName?.toString().toLowerCase().includes(queryLowered) || student.type.toLowerCase().includes(queryLowered)) &&\n        student.class === (className || student.class) && student.level === (level || student.level) && student.group === (group || student.group) && student.status === (status || student.status)\n    )\n\n    /* eslint-enable  */\n\n    dispatch({\n      type: 'GET_FILTERED_STUDENT_DATA',\n      data: paginateArray(filteredData, perPage, page),\n      totalPages: filteredData.length,\n      params\n    })\n  }\n}\n\n// get user details\nexport const getStudentDetails =  (id) => {\n  return async dispatch => {\n    const response = await apiRequest({ url: `/students/get-detail/${id}`, method: 'GET' }, dispatch)\n    console.log(response)\n    if (response && response.data && response.data.status) {\n      await dispatch({\n        type: 'GET_STUDENT_DETAILS',\n        studentDetails: response.data.data\n      })\n    } else {\n      console.log(response)\n      swal('Oops!', 'Something went wrong.', 'error')\n    }\n  }\n}\n\n// Add Funds\nexport const creditOrDebitStudentWallet = ({studentId, narration, amount, type}) => {\n  return async dispatch => {\n    const body = JSON.stringify({studentId, narration, amount, type})\n    const response = await apiRequest({url:`/students/wallet`, method:'POST', body}, dispatch)\n    console.log({response})\n    if (response && response.data.status) {\n      swal('Good!', `Funds of ${amount} was successfully ${type === 'credit' ? 'added' : 'deducted'}!.`, 'success')\n    } else {\n      console.log(response)\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n  }\n}\n\n// Delete Student\nexport const deleteStudent = (studentId) => {\n  return async dispatch => {\n    const response = await apiRequest({url:`/students/delete/${studentId}`, method:'GET'}, dispatch)\n    if (response && response.data.status) {\n        return response.data\n    } else {\n      console.log(response)\n      swal('Oops!', 'Something went wrong.', 'error')\n    }\n  }\n}\n\n\n// ALl Transactions\nexport const getUserAllTransactions = (user_id) => {\n  return async dispatch => {\n    const body = JSON.stringify({ user_id })\n    const response = await apiRequest({ url: '/admin/users/transactions/all', method: 'POST', body }, dispatch)\n    if (response && response.data.data && response.data.success) {\n      await dispatch({\n        type: 'GET_STUDENT_ALL_TRANSACTIONS',\n        data: response.data.data\n      })\n    } else {\n      console.log(response)\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n  }\n}\n\n// Filtered Transactions\nexport const getFilteredUserTransactions = (userTransactions, params) => {\n  return async dispatch => {\n    const { q = '', perPage = 10, page = 1 } = params\n    /* eslint-enable */\n\n    const queryLowered = q?.toLowerCase()\n    const filteredData = userTransactions?.filter(\n      transaction => (transaction?.transactionId?.toLowerCase()?.includes(queryLowered) || moment(transaction.createdAt).format('lll')?.toLowerCase()?.includes(queryLowered)))\n    /* eslint-enable  */\n    await dispatch({\n      type: 'GET_STUDENT_TRANSACTIONS',\n      data: paginateArray(filteredData, perPage, page),\n      totalPages: filteredData.length,\n      params\n    })\n  }\n}\n\n// Utilities Transactions\nexport const getUserAllUtilitiesTransactions = (user_id) => {\n  return async dispatch => {\n    const body = JSON.stringify({ user_id })\n    const response = await apiRequest({ url: '/admin/users/transactions/utility', method: 'POST', body }, dispatch)\n    if (response && response.data.data && response.data.success) {\n      await dispatch({\n        type: 'GET_STUDENT_ALL_UTILITIES_TRANSACTIONS',\n        data: response.data.data\n      })\n    } else {\n      console.log(response)\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n  }\n}\n\n// Filtered Utility Transactions\nexport const getFilteredStudentOrders = (orders, params) => {\n  return async dispatch => {\n    const { q = '', perPage = 10, page = 1 } = params\n    /* eslint-enable */\n\n    const queryLowered = q.toLowerCase()\n    const filteredData = orders.filter(\n      order => (order.orderNumber.toLowerCase().includes(queryLowered) || moment(order.createdAt).format('lll').toLowerCase().includes(queryLowered)))\n    /* eslint-enable  */\n    await dispatch({\n      type: 'GET_STUDENT_ORDERS',\n      data: paginateArray(filteredData, perPage, page),\n      totalPages: filteredData.length,\n      params\n    })\n  }\n}\n\n\n// update student status\nexport const updateStudentStatus = (studentId, status) => {\n  return async dispatch => {\n    const body = JSON.stringify({status})\n    const response = await apiRequest({ url: `/students/update/${studentId}`, method: 'POST', body }, dispatch)\n    if (response) {\n      console.log(response)\n      if (response.data.status) {\n        await dispatch(getAllData())\n        await dispatch(getStudentDetails(studentId))\n        swal('Good!', `${response.data.message}.`, 'success')\n      } else {\n        swal('Oops!', `${response.data.message}.`, 'error')\n      }\n    } else {\n      swal('Oops!', 'Something went wrong with your network.', 'error')\n    }\n\n  }\n}\n\n// deactivate User account\nexport const deactivateUser = (users, id) => {\n  const user = users.find(i => i.user_id === id)\n  return async dispatch => {\n    const response = await apiRequest({ url: `/admin/users/deactivate/${user.user_id}`, method: 'GET' }, dispatch)\n    if (response) {\n      if (response.data.success) {\n        dispatch({\n          type: 'GET_USER',\n          selectedUser: { ...user, status: \"Inactive\" }\n        })\n        swal('Good!', `${response.data.message}.`, 'success')\n        dispatch(getAllData())\n      } else {\n        swal('Oops!', `${response.data.message}.`, 'error')\n      }\n    } else {\n      swal('Oops!', 'Something went wrong with your network.', 'error')\n    }\n\n  }\n}\n\n//  Reset User Password\nexport const passwordReset = ({ user_id }) => {\n  return async dispatch => {\n    const body = JSON.stringify({ user_id })\n    const response = await apiRequest({ url: `/admin/users/reset/`, method: 'POST', body }, dispatch)\n    if (response && response.data.success) {\n      swal('Good!', `User password reset Sucessfully.`, 'success')\n    } else {\n      console.log(response)\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n  }\n}\n"],"sourceRoot":""}