{"version":3,"sources":["views/apps/user/list/Sidebar.js","views/apps/user/list/columns.js","views/apps/user/list/Table.js","views/apps/user/list/index.js","@core/components/sidebar/index.js","views/apps/user/store/action/index.js"],"names":["SidebarNewUsers","open","toggleSidebar","size","title","headerClassName","contentClassName","onSubmit","event","errors","length","preventDefault","FormGroup","Label","for","name","id","placeholder","required","type","FormText","color","value","className","Button","outline","onClick","renderClient","row","Math","floor","random","avatar","img","width","height","content","fullName","initials","statusObj","pending","active","inactive","columns","minWidth","selector","sortable","cell","to","store","dispatch","getUser","username","email","roleObj","subscriber","class","icon","User","maintainer","Database","editor","Edit","author","Settings","admin","Slack","Icon","role","renderRole","currentPlan","Badge","status","pill","UncontrolledDropdown","DropdownToggle","tag","DropdownMenu","right","DropdownItem","Link","CustomHeader","handlePerPage","rowsPerPage","handleFilter","searchTerm","Row","Col","xl","CustomInput","onChange","style","padding","backgroundPosition","Input","e","target","Ripple","UsersList","useDispatch","useSelector","state","users","useState","setSearchTerm","currentPage","setCurrentPage","setRowsPerPage","sidebarOpen","setSidebarOpen","label","currentRole","setCurrentRole","setCurrentPlan","number","currentStatus","setCurrentStatus","useEffect","getAllData","getData","page","perPage","q","Card","CardHeader","CardTitle","CardBody","md","isClearable","theme","selectThemeColors","classNamePrefix","options","data","W","noHeader","pagination","subHeader","responsive","paginationServer","sortIcon","paginationComponent","count","Number","total","toFixed","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","filters","isFiltered","Object","keys","some","k","allData","slice","dataToRender","subHeaderComponent","parseInt","currentTarget","val","Sidebar","Table","props","bodyClassName","wrapperClassName","children","closeBtn","rest","renderCloseBtn","isOpen","toggle","classnames","modalClassName","undefined","String","close","a","axios","get","then","response","params","totalPages","selectedUser","user","catch","err","console","log"],"mappings":"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","file":"static/js/166.65b78289.chunk.js","sourcesContent":["// ** Custom Components\nimport Sidebar from '@components/sidebar'\n\n// ** Third Party Components\nimport { Button, FormGroup, Label, FormText } from 'reactstrap'\nimport { AvForm, AvInput } from 'availity-reactstrap-validation-safe'\n\nconst SidebarNewUsers = ({ open, toggleSidebar }) => {\n  // ** Function to handle form submit\n  const onSubmit = (event, errors) => {\n    if (!errors.length) {\n      toggleSidebar()\n    }\n    event.preventDefault()\n  }\n\n  return (\n    <Sidebar\n      size='lg'\n      open={open}\n      title='New User'\n      headerClassName='mb-1'\n      contentClassName='pt-0'\n      toggleSidebar={toggleSidebar}\n    >\n      <AvForm onSubmit={onSubmit}>\n        <FormGroup>\n          <Label for='full-name'>Full Name</Label>\n          <AvInput name='full-name' id='full-name' placeholder='John Doe' required />\n        </FormGroup>\n        <FormGroup>\n          <Label for='username'>Username</Label>\n          <AvInput name='username' id='username' placeholder='johnDoe99' required />\n        </FormGroup>\n        <FormGroup>\n          <Label for='email'>Email</Label>\n          <AvInput type='email' name='email' id='email' placeholder='john.doe@example.com' required />\n          <FormText color='muted'>You can use letters, numbers & periods</FormText>\n        </FormGroup>\n        <FormGroup>\n          <Label for='country'>Country</Label>\n          <AvInput name='country' id='country' placeholder='Australia' required />\n        </FormGroup>\n        <FormGroup>\n          <Label for='contact'>Contact</Label>\n          <AvInput name='contact' id='contact' placeholder='(397) 294-5153' required />\n        </FormGroup>\n        <FormGroup>\n          <Label for='user-role'>User Role</Label>\n          <AvInput type='select' id='user-role' name='user-role' required>\n            <option value='subscriber'>Subscriber</option>\n            <option value='editor'>Editor</option>\n            <option value='maintainer'>Maintainer</option>\n            <option value='author'>Author</option>\n            <option value='admin'>Admin</option>\n          </AvInput>\n        </FormGroup>\n        <FormGroup className='mb-2'>\n          <Label for='select-plan'>Select Plan</Label>\n          <AvInput type='select' id='select-plan' name='select-plan' required>\n            <option value='basic'>Basic</option>\n            <option value='enterprise'>Enterprise</option>\n            <option value='company'>Company</option>\n            <option value='team'>Team</option>\n          </AvInput>\n        </FormGroup>\n        <Button type='submit' className='mr-1' color='primary'>\n          Submit\n        </Button>\n        <Button type='reset' color='secondary' outline onClick={toggleSidebar}>\n          Cancel\n        </Button>\n      </AvForm>\n    </Sidebar>\n  )\n}\n\nexport default SidebarNewUsers\n","// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { getUser } from '../store/action'\nimport { store } from '@store/storeConfig/store'\n\n// ** Third Party Components\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport { Slack, User, Settings, Database, Edit, MoreVertical, FileText, Trash2, Archive } from 'react-feather'\n\n// ** Renders Client Columns\nconst renderClient = row => {\n  const stateNum = Math.floor(Math.random() * 6),\n    states = ['light-success', 'light-danger', 'light-warning', 'light-info', 'light-primary', 'light-secondary'],\n    color = states[stateNum]\n\n  if (row.avatar.length) {\n    return <Avatar className='mr-1' img={row.avatar} width='32' height='32' />\n  } else {\n    return <Avatar color={color || 'primary'} className='mr-1' content={row.fullName || 'John Doe'} initials />\n  }\n}\n\n// ** Renders Role Columns\nconst renderRole = row => {\n  const roleObj = {\n    subscriber: {\n      class: 'text-primary',\n      icon: User\n    },\n    maintainer: {\n      class: 'text-success',\n      icon: Database\n    },\n    editor: {\n      class: 'text-info',\n      icon: Edit\n    },\n    author: {\n      class: 'text-warning',\n      icon: Settings\n    },\n    admin: {\n      class: 'text-danger',\n      icon: Slack\n    }\n  }\n\n  const Icon = roleObj[row.role] ? roleObj[row.role].icon : Edit\n\n  return (\n    <span className='text-truncate text-capitalize align-middle'>\n      <Icon size={18} className={`${roleObj[row.role] ? roleObj[row.role].class : ''} mr-50`} />\n      {row.role}\n    </span>\n  )\n}\n\nconst statusObj = {\n  pending: 'light-warning',\n  active: 'light-success',\n  inactive: 'light-secondary'\n}\n\nexport const columns = [\n  {\n    name: 'User',\n    minWidth: '297px',\n    selector: 'fullName',\n    sortable: true,\n    cell: row => (\n      <div className='d-flex justify-content-left align-items-center'>\n        {renderClient(row)}\n        <div className='d-flex flex-column'>\n          <Link\n            to={`/apps/user/view/${row.id}`}\n            className='user-name text-truncate mb-0'\n            onClick={() => store.dispatch(getUser(row.id))}\n          >\n            <span className='font-weight-bold'>{row.fullName}</span>\n          </Link>\n          <small className='text-truncate text-muted mb-0'>@{row.username}</small>\n        </div>\n      </div>\n    )\n  },\n  {\n    name: 'Email',\n    minWidth: '320px',\n    selector: 'email',\n    sortable: true,\n    cell: row => row.email\n  },\n  {\n    name: 'Role',\n    minWidth: '172px',\n    selector: 'role',\n    sortable: true,\n    cell: row => renderRole(row)\n  },\n  {\n    name: 'Plan',\n    minWidth: '138px',\n    selector: 'currentPlan',\n    sortable: true,\n    cell: row => <span className='text-capitalize'>{row.currentPlan}</span>\n  },\n  {\n    name: 'Status',\n    minWidth: '138px',\n    selector: 'status',\n    sortable: true,\n    cell: row => (\n      <Badge className='text-capitalize' color={statusObj[row.status]} pill>\n        {row.status}\n      </Badge>\n    )\n  },\n  {\n    name: 'Actions',\n    minWidth: '100px',\n    selector: 'fullName',\n    sortable: true,\n    cell: row => (\n      <UncontrolledDropdown>\n        <DropdownToggle tag='div' className='btn btn-sm'>\n          <MoreVertical size={14} className='cursor-pointer' />\n        </DropdownToggle>\n        <DropdownMenu right>\n          <DropdownItem\n            tag={Link}\n            to={`/apps/user/view/${row.id}`}\n            className='w-100'\n            onClick={() => store.dispatch(getUser(row.id))}\n          >\n            <FileText size={14} className='mr-50' />\n            <span className='align-middle'>Details</span>\n          </DropdownItem>\n          <DropdownItem\n            tag={Link}\n            to={`/apps/user/edit/${row.id}`}\n            className='w-100'\n            onClick={() => store.dispatch(getUser(row.id))}\n          >\n            <Archive size={14} className='mr-50' />\n            <span className='align-middle'>Edit</span>\n          </DropdownItem>\n          <DropdownItem className='w-100'>\n            <Trash2 size={14} className='mr-50' />\n            <span className='align-middle'>Delete</span>\n          </DropdownItem>\n        </DropdownMenu>\n      </UncontrolledDropdown>\n    )\n  }\n]\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Invoice List Sidebar\nimport Sidebar from './Sidebar'\n\n// ** Columns\nimport { columns } from './columns'\n\n// ** Store & Actions\nimport { getAllData, getData } from '../store/action'\nimport { useDispatch, useSelector } from 'react-redux'\n\n// ** Third Party Components\nimport Select from 'react-select'\nimport ReactPaginate from 'react-paginate'\nimport { ChevronDown } from 'react-feather'\nimport DataTable from 'react-data-table-component'\nimport { selectThemeColors } from '@utils'\nimport { Card, CardHeader, CardTitle, CardBody, Input, Row, Col, Label, CustomInput, Button } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\n\n// ** Table Header\nconst CustomHeader = ({ toggleSidebar, handlePerPage, rowsPerPage, handleFilter, searchTerm }) => {\n  return (\n    <div className='invoice-list-table-header w-100 mr-1 ml-50 mt-2 mb-75'>\n      <Row>\n        <Col xl='6' className='d-flex align-items-center p-0'>\n          <div className='d-flex align-items-center w-100'>\n            <Label for='rows-per-page'>Show</Label>\n            <CustomInput\n              className='form-control mx-50'\n              type='select'\n              id='rows-per-page'\n              value={rowsPerPage}\n              onChange={handlePerPage}\n              style={{\n                width: '5rem',\n                padding: '0 0.8rem',\n                backgroundPosition: 'calc(100% - 3px) 11px, calc(100% - 20px) 13px, 100% 0'\n              }}\n            >\n              <option value='10'>10</option>\n              <option value='25'>25</option>\n              <option value='50'>50</option>\n            </CustomInput>\n            <Label for='rows-per-page'>Entries</Label>\n          </div>\n        </Col>\n        <Col\n          xl='6'\n          className='d-flex align-items-sm-center justify-content-lg-end justify-content-start flex-lg-nowrap flex-wrap flex-sm-row flex-column pr-lg-1 p-0 mt-lg-0 mt-1'\n        >\n          <div className='d-flex align-items-center mb-sm-0 mb-1 mr-1'>\n            <Label className='mb-0' for='search-invoice'>\n              Search:\n            </Label>\n            <Input\n              id='search-invoice'\n              className='ml-50 w-100'\n              type='text'\n              value={searchTerm}\n              onChange={e => handleFilter(e.target.value)}\n            />\n          </div>\n          <Button.Ripple color='primary' onClick={toggleSidebar}>\n            Add New User\n          </Button.Ripple>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nconst UsersList = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.users)\n\n  // ** States\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [sidebarOpen, setSidebarOpen] = useState(false)\n  const [currentRole, setCurrentRole] = useState({ value: '', label: 'Select Role' })\n  const [currentPlan, setCurrentPlan] = useState({ value: '', label: 'Select Plan' })\n  const [currentStatus, setCurrentStatus] = useState({ value: '', label: 'Select Status', number: 0 })\n\n  // ** Function to toggle sidebar\n  const toggleSidebar = () => setSidebarOpen(!sidebarOpen)\n\n  // ** Get data on mount\n  useEffect(() => {\n    dispatch(getAllData())\n    dispatch(\n      getData({\n        page: currentPage,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        currentPlan: currentPlan.value,\n        status: currentStatus.value,\n        q: searchTerm\n      })\n    )\n  }, [dispatch])\n\n  // ** User filter options\n  const roleOptions = [\n    { value: '', label: 'Select Role' },\n    { value: 'admin', label: 'Admin' },\n    { value: 'author', label: 'Author' },\n    { value: 'editor', label: 'Editor' },\n    { value: 'maintainer', label: 'Maintainer' },\n    { value: 'subscriber', label: 'Subscriber' }\n  ]\n\n  const planOptions = [\n    { value: '', label: 'Select Plan' },\n    { value: 'basic', label: 'Basic' },\n    { value: 'company', label: 'Company' },\n    { value: 'enterprise', label: 'Enterprise' },\n    { value: 'team', label: 'Team' }\n  ]\n\n  const statusOptions = [\n    { value: '', label: 'Select Status', number: 0 },\n    { value: 'pending', label: 'Pending', number: 1 },\n    { value: 'active', label: 'Active', number: 2 },\n    { value: 'inactive', label: 'Inactive', number: 3 }\n  ]\n\n  // ** Function in get data on page change\n  const handlePagination = page => {\n    dispatch(\n      getData({\n        page: page.selected + 1,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        currentPlan: currentPlan.value,\n        status: currentStatus.value,\n        q: searchTerm\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = e => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getData({\n        page: currentPage,\n        perPage: value,\n        role: currentRole.value,\n        currentPlan: currentPlan.value,\n        status: currentStatus.value,\n        q: searchTerm\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  // ** Function in get data on search query change\n  const handleFilter = val => {\n    setSearchTerm(val)\n    dispatch(\n      getData({\n        page: currentPage,\n        perPage: rowsPerPage,\n        role: currentRole.value,\n        currentPlan: currentPlan.value,\n        status: currentStatus.value,\n        q: val\n      })\n    )\n  }\n\n  // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Number((store.total / rowsPerPage).toFixed(0))\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        pageCount={count || 1}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        containerClassName={'pagination react-paginate justify-content-end my-2 pr-1'}\n      />\n    )\n  }\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      role: currentRole.value,\n      currentPlan: currentPlan.value,\n      status: currentStatus.value,\n      q: searchTerm\n    }\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n\n    if (store.data.length > 0) {\n      return store.data\n    } else if (store.data.length === 0 && isFiltered) {\n      return []\n    } else {\n      return store.allData.slice(0, rowsPerPage)\n    }\n  }\n\n  return (\n    <Fragment>\n      <Card>\n        <CardHeader>\n          <CardTitle tag='h4'>Search Filter</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Row>\n            <Col md='4'>\n              <Select\n                isClearable={false}\n                theme={selectThemeColors}\n                className='react-select'\n                classNamePrefix='select'\n                options={roleOptions}\n                value={currentRole}\n                onChange={data => {\n                  setCurrentRole(data)\n                  dispatch(\n                    getData({\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      role: data.value,\n                      currentPlan: currentPlan.value,\n                      status: currentStatus.value,\n                      q: searchTerm\n                    })\n                  )\n                }}\n              />\n            </Col>\n            <Col className='my-md-0 my-1' md='4'>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={planOptions}\n                value={currentPlan}\n                onChange={data => {\n                  setCurrentPlan(data)\n                  dispatch(\n                    getData({\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      role: currentRole.value,\n                      currentPlan: data.value,\n                      status: currentStatus.value,\n                      q: searchTerm\n                    })\n                  )\n                }}\n              />\n            </Col>\n            <Col md='4'>\n              <Select\n                theme={selectThemeColors}\n                isClearable={false}\n                className='react-select'\n                classNamePrefix='select'\n                options={statusOptions}\n                W\n                value={currentStatus}\n                onChange={data => {\n                  setCurrentStatus(data)\n                  dispatch(\n                    getData({\n                      page: currentPage,\n                      perPage: rowsPerPage,\n                      role: currentRole.value,\n                      currentPlan: currentPlan.value,\n                      status: data.value,\n                      q: searchTerm\n                    })\n                  )\n                }}\n              />\n            </Col>\n          </Row>\n        </CardBody>\n      </Card>\n\n      <Card>\n        <DataTable\n          noHeader\n          pagination\n          subHeader\n          responsive\n          paginationServer\n          columns={columns}\n          sortIcon={<ChevronDown />}\n          className='react-dataTable'\n          paginationComponent={CustomPagination}\n          data={dataToRender()}\n          subHeaderComponent={\n            <CustomHeader\n              toggleSidebar={toggleSidebar}\n              handlePerPage={handlePerPage}\n              rowsPerPage={rowsPerPage}\n              searchTerm={searchTerm}\n              handleFilter={handleFilter}\n            />\n          }\n        />\n      </Card>\n\n      <Sidebar open={sidebarOpen} toggleSidebar={toggleSidebar} />\n    </Fragment>\n  )\n}\n\nexport default UsersList\n","// ** User List Component\nimport Table from './Table'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst UsersList = () => {\n  return (\n    <div className='app-user-list'>\n      <Table />\n    </div>\n  )\n}\n\nexport default UsersList\n","// ** Third Party Components\nimport { X } from 'react-feather'\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Modal, ModalHeader, ModalBody } from 'reactstrap'\n\nconst Sidebar = props => {\n  // ** Props\n  const {\n    width,\n    open,\n    toggleSidebar,\n    size,\n    bodyClassName,\n    contentClassName,\n    wrapperClassName,\n    headerClassName,\n    className,\n    title,\n    children,\n    closeBtn,\n    ...rest\n  } = props\n\n  // ** If user passes custom close btn render that else default close btn\n  const renderCloseBtn = closeBtn ? closeBtn : <X className='cursor-pointer' size={15} onClick={toggleSidebar} />\n\n  return (\n    <Modal\n      isOpen={open}\n      toggle={toggleSidebar}\n      contentClassName={classnames({\n        [contentClassName]: contentClassName\n      })}\n      modalClassName={classnames('modal-slide-in', {\n        [wrapperClassName]: wrapperClassName\n      })}\n      className={classnames({\n        [className]: className,\n        'sidebar-lg': size === 'lg',\n        'sidebar-sm': size === 'sm'\n      })}\n      /*eslint-disable */\n      {...(width !== undefined\n        ? {\n            style: { width: String(width) + 'px' }\n          }\n        : {})}\n      /*eslint-enable */\n      {...rest}\n    >\n      <ModalHeader\n        className={classnames({\n          [headerClassName]: headerClassName\n        })}\n        toggle={toggleSidebar}\n        close={renderCloseBtn}\n        tag='div'\n      >\n        <h5 className='modal-title'>\n          <span className='align-middle'>{title}</span>\n        </h5>\n      </ModalHeader>\n      <ModalBody\n        className={classnames('flex-grow-1', {\n          [bodyClassName]: bodyClassName\n        })}\n      >\n        {children}\n      </ModalBody>\n    </Modal>\n  )\n}\n\nexport default Sidebar\n\n// ** PropTypes\nSidebar.propTypes = {\n  title: Proptypes.string.isRequired,\n  open: Proptypes.bool.isRequired,\n  toggleSidebar: Proptypes.func.isRequired,\n  size: Proptypes.oneOf(['sm', 'lg']),\n  className: Proptypes.string,\n  bodyClassName: Proptypes.string,\n  contentClassName: Proptypes.string,\n  wrapperClassName: Proptypes.string,\n  children: Proptypes.any.isRequired,\n  width: Proptypes.oneOfType([Proptypes.number, Proptypes.string])\n}\n","import axios from 'axios'\n\n// ** Get all Data\nexport const getAllData = () => {\n  return async dispatch => {\n    await axios.get('/api/users/list/all-data').then(response => {\n      dispatch({\n        type: 'GET_ALL_DATA',\n        data: response.data\n      })\n    })\n  }\n}\n\n// ** Get data on page or row change\nexport const getData = params => {\n  return async dispatch => {\n    await axios.get('/api/users/list/data', params).then(response => {\n      dispatch({\n        type: 'GET_DATA',\n        data: response.data.users,\n        totalPages: response.data.total,\n        params\n      })\n    })\n  }\n}\n\n// ** Get User\nexport const getUser = id => {\n  return async dispatch => {\n    await axios\n      .get('/api/users/user', { id })\n      .then(response => {\n        dispatch({\n          type: 'GET_USER',\n          selectedUser: response.data.user\n        })\n      })\n      .catch(err => console.log(err))\n  }\n}\n"],"sourceRoot":""}