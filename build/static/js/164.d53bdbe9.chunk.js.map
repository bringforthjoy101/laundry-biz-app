{"version":3,"sources":["views/pages/account-settings/Tabs.js","@core/components/input-email-toggle/index.js","views/pages/account-settings/PasswordTabContent.js","views/pages/account-settings/ResetPassword.js","views/pages/account-settings/index.js","@core/components/breadcrumbs/index.js","@core/components/input-password-toggle/index.js"],"names":["Tabs","activeTab","toggleTab","Nav","className","pills","vertical","NavItem","NavLink","active","onClick","size","InputPasswordToggle","props","label","hideIcon","showIcon","htmlFor","rest","placeholder","iconSize","Label","for","InputGroup","classnames","Input","type","id","defaultProps","visible","PasswordTabContent","dispatch","useDispatch","useState","old_password","new_password","email","userData","setUserData","onSubmit","event","errors","a","preventDefault","console","log","length","body","JSON","stringify","apiRequest","url","method","response","data","success","swal","message","toggleSidebar","error","Row","Col","sm","FormGroup","tag","AvInput","name","required","value","onChange","e","target","Button","Ripple","color","outline","AccountSettings","setActiveTab","setData","useEffect","axios","get","then","breadCrumbTitle","breadCrumbParent","breadCrumbActive","md","tab","Card","CardBody","TabContent","TabPane","tabId","ResetPassword","BreadCrumbs","breadCrumbParent2","breadCrumbParent3","to","inputVisibility","setInputVisibility","addonType","renderIcon"],"mappings":"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","file":"static/js/164.d53bdbe9.chunk.js","sourcesContent":["import { Nav, NavItem, NavLink } from 'reactstrap'\nimport { User, Lock, Info, Link, Bell } from 'react-feather'\n\nconst Tabs = ({ activeTab, toggleTab }) => {\n  return (\n    <Nav className='nav-left' pills vertical>\n      <NavItem>\n        <NavLink active={activeTab === '1'} onClick={() => toggleTab('1')}>\n          <Lock size={18} className='mr-1' />\n          <span className='font-weight-bold'>Change Password</span>\n        </NavLink>\n      </NavItem>\n      <NavItem>\n        <NavLink active={activeTab === '2'} onClick={() => toggleTab('2')}>\n          <Lock size={18} className='mr-1' />\n          <span className='font-weight-bold'> Reset Password</span>\n        </NavLink>\n      </NavItem>\n    </Nav>\n  )\n}\n\nexport default Tabs\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { InputGroup, Input, Label } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const { label, hideIcon, showIcon, className, htmlFor, placeholder, iconSize, ...rest } = props\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type='email'\n          placeholder='email@gmail.com'\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n","import {useState} from 'react'\nimport { FormGroup, Row, Col, Button } from 'reactstrap'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport InputEmailToggle from '@components/input-email-toggle'\nimport { AvForm, AvInput } from 'availity-reactstrap-validation-safe'\nimport { swal, apiRequest } from '@utils'\nimport { useDispatch } from 'react-redux'\n\nconst PasswordTabContent = () => {\n  const dispatch = useDispatch()\n  const [userData, setUserData] = useState({\n    old_password: '',\n    new_password: '',\n    email: ''\n  })\n\n  const onSubmit = async (event, errors) => {\n    event.preventDefault()\n    console.log({errors})\n    if (errors && !errors.length) {\n      console.log({userData})\n      const body = JSON.stringify(userData)\n      try {\n        const response = await apiRequest({url:'/admin/change_password', method:'POST', body}, dispatch)\n        console.log({response})\n        if (response.data.success) {\n            swal('Great job!', response.data.message, 'success')\n            toggleSidebar()\n        } else {\n          swal('Oops!', response.data.message, 'error')\n        }\n      } catch (error) {\n        console.error({error})\n      }\n    }\n  }\n  return (\n    <AvForm onSubmit={onSubmit}>\n      <Row>\n        <Col sm='6'>\n          <FormGroup>\n            <InputPasswordToggle\n              tag={AvInput}\n              className='input-group-merge'\n              label='Old Password'\n              htmlFor='old_password'\n              name='old_password'\n              required\n              value={userData.old_password}\n              onChange={e => setUserData({...userData, old_password: e.target.value})}\n            />\n          </FormGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col sm='6'>\n          <FormGroup>\n            <InputPasswordToggle\n              tag={AvInput}\n              className='input-group-merge'\n              label='New Password'\n              htmlFor='new_password'\n              name='new_password'\n              required\n              value={userData.new_password}\n              onChange={e => setUserData({...userData, new_password: e.target.value})}\n            />\n          </FormGroup>\n        </Col>\n        <Col sm='6'>\n          <FormGroup>\n            <InputEmailToggle\n              tag={AvInput}\n              className='input-group-merge'\n              label='Email'\n              htmlFor='email'\n              name='email'\n              required\n              value={userData.email}\n              onChange={e => setUserData({...userData, email: e.target.value})}\n            />\n          </FormGroup>\n        </Col>\n        <Col className='mt-1' sm='12'>\n          <Button.Ripple className='mr-1' color='primary'>\n            Save changes\n          </Button.Ripple>\n          <Button.Ripple color='secondary' outline>\n            Cancel\n          </Button.Ripple>\n        </Col>\n      </Row>\n    </AvForm>\n  )\n}\n\nexport default PasswordTabContent\n","import {useState} from 'react'\nimport { FormGroup, Row, Col, Button } from 'reactstrap'\nimport InputEmailToggle from '@components/input-email-toggle'\nimport { AvForm, AvInput } from 'availity-reactstrap-validation-safe'\nimport { swal, apiRequest } from '@utils'\nimport { useDispatch } from 'react-redux'\n\nconst PasswordTabContent = () => {\n  const dispatch = useDispatch()\n  const [userData, setUserData] = useState({\n    email: ''\n  })\n\n  const onSubmit = async (event, errors) => {\n    event.preventDefault()\n    if (errors && !errors.length) {\n      const body = JSON.stringify(userData)\n      try {\n        const response = await apiRequest({url:'/admin/reset_password', method:'POST', body}, dispatch)\n        if (response.data.success) {\n            swal('Great job!', response.data.message, 'success')\n        } else {\n          swal('Oops!', response.data.message, 'error')\n        }\n      } catch (error) {\n        console.error({error})\n      }\n    }\n  }\n  \n  return (\n    <AvForm onSubmit={onSubmit}>\n      <Row>\n        <Col sm='6'>\n          <FormGroup>\n            <InputEmailToggle\n              tag={AvInput}\n              className='input-group-merge'\n              label='Email'\n              htmlFor='email'\n              name='email'\n              required\n              value={userData.email}\n              onChange={e => setUserData({...userData, email: e.target.value})}\n            />\n          </FormGroup>\n        </Col>\n        <Col className='mt-1' sm='12'>\n          <Button.Ripple className='mr-1' color='primary'>\n            Save changes\n          </Button.Ripple>\n          <Button.Ripple color='secondary' outline>\n            Cancel\n          </Button.Ripple>\n        </Col>\n      </Row>\n    </AvForm>\n  )\n}\n\nexport default PasswordTabContent\n","import { Fragment, useState, useEffect } from 'react'\nimport Tabs from './Tabs'\nimport axios from 'axios'\nimport Breadcrumbs from '@components/breadcrumbs'\nimport PasswordTabContent from './PasswordTabContent'\nimport ResetPassword from './ResetPassword'\nimport { Row, Col, TabContent, TabPane, Card, CardBody } from 'reactstrap'\n\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\nimport '@styles/react/pages/page-account-settings.scss'\n\nconst AccountSettings = () => {\n  const [activeTab, setActiveTab] = useState('1'),\n    [data, setData] = useState(null)\n\n  const toggleTab = tab => {\n    setActiveTab(tab)\n  }\n\n  useEffect(() => {\n    axios.get('/account-setting/data').then(response => setData(response.data))\n  }, [])\n\n  return (\n    <Fragment>\n      <Breadcrumbs breadCrumbTitle='Account Settings' breadCrumbParent='Pages' breadCrumbActive='Account Settings' />\n        <Row>\n          <Col className='mb-2 mb-md-0' md='3'>\n            <Tabs activeTab={activeTab} toggleTab={toggleTab} />\n          </Col>\n          <Col md='9'>\n            <Card>\n              <CardBody>\n                <TabContent activeTab={activeTab}>\n                  <TabPane tabId='1'>\n                    <PasswordTabContent />\n                  </TabPane>\n                  <TabPane tabId='2'>\n                    <ResetPassword />\n                  </TabPane>\n                </TabContent>\n              </CardBody>\n            </Card>\n          </Col>\n        </Row>\n    </Fragment>\n  )\n}\n\nexport default AccountSettings\n","// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\nimport {\n  Breadcrumb,\n  BreadcrumbItem,\n  UncontrolledButtonDropdown,\n  DropdownMenu,\n  DropdownItem,\n  DropdownToggle\n} from 'reactstrap'\n\nconst BreadCrumbs = props => {\n  // ** Props\n  const { breadCrumbTitle, breadCrumbParent, breadCrumbParent2, breadCrumbParent3, breadCrumbActive } = props\n\n  return (\n    <div className='content-header row'>\n      <div className='content-header-left col-md-9 col-12 mb-2'>\n        <div className='row breadcrumbs-top'>\n          <div className='col-12'>\n            {breadCrumbTitle ? <h2 className='content-header-title float-left mb-0'>{breadCrumbTitle}</h2> : ''}\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\n              <Breadcrumb>\n                <BreadcrumbItem tag='li'>\n                  <Link to='/'>Home</Link>\n                </BreadcrumbItem>\n                <BreadcrumbItem tag='li' className='text-primary'>\n                  {breadCrumbParent}\n                </BreadcrumbItem>\n                {breadCrumbParent2 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent2}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                {breadCrumbParent3 ? (\n                  <BreadcrumbItem tag='li' className='text-primary'>\n                    {breadCrumbParent3}\n                  </BreadcrumbItem>\n                ) : (\n                  ''\n                )}\n                <BreadcrumbItem tag='li' active>\n                  {breadCrumbActive}\n                </BreadcrumbItem>\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='content-header-right text-md-right col-md-3 col-12 d-md-block d-none'>\n        <div className='form-group breadcrum-right dropdown'>\n          {/* <UncontrolledButtonDropdown>\n            <DropdownToggle color='primary' size='sm' className='btn-icon btn-round dropdown-toggle'>\n              <Grid size={14} />\n            </DropdownToggle>\n            <DropdownMenu tag='ul' right>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <CheckSquare className='mr-1' size={14} />\n                <span className='align-middle'>Todo</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <MessageSquare className='mr-1' size={14} />\n                <span className='align-middle'>Chat</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/email'>\n                <Mail className='mr-1' size={14} />\n                <span className='align-middle'>Email</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/calendar'>\n                <Calendar className='mr-1' size={14} />\n                <span className='align-middle'>Calendar</span>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledButtonDropdown> */}\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  breadCrumbTitle: Proptypes.string.isRequired,\n  breadCrumbActive: Proptypes.string.isRequired\n}\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const { label, hideIcon, showIcon, visible, className, htmlFor, placeholder, iconSize, ...rest } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}