{"version":3,"sources":["@core/auth/jwt/jwtDefaultConfig.js","auth/jwt/useJwt.js","@core/auth/jwt/useJwt.js","@core/auth/jwt/jwtService.js","views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js"],"names":["loginEndpoint","registerEndpoint","refreshEndpoint","logoutEndpoint","tuckShopLoginEndpoint","process","tokenType","storageTokenKeyName","storageRefreshTokenKeyName","jwt","jwtOverrideConfig","jwtConfig","jwtDefaultConfig","isAlreadyFetchingAccessToken","subscribers","this","axios","interceptors","request","use","config","accessToken","getToken","headers","Authorization","error","Promise","reject","response","originalRequest","status","refreshToken","then","r","setToken","data","setRefreshToken","onAccessTokenFetched","resolve","addSubscriber","filter","callback","push","localStorage","getItem","value","setItem","args","post","getRefreshToken","ToastContentValid","name","role","className","size","color","icon","InvalidLoginToastContent","message","Login","props","useSkin","ability","useContext","AbilityContext","dispatch","useDispatch","history","useHistory","useState","email","setEmail","password","setPassword","isSubmitting","setIsSubmitting","source","require","default","handleSubmit","event","errors","a","length","useJwt","login","res","success","admin","token","action","subject","avatar","extras","eCommerceCartItemsCount","console","log","handleLogin","update","getHomeRouteForLoggedInUser","toast","firstName","lastName","fullName","username","transition","Slide","hideProgressBar","autoClose","catch","err","Row","to","onClick","e","preventDefault","src","Logo","width","Col","lg","sm","alt","md","CardTitle","tag","CardText","onSubmit","FormGroup","Label","for","required","autoFocus","type","id","placeholder","onChange","target","AvInput","autoComplete","CustomInput","label","Button","Ripple","block","disabled","Spinner","InputPasswordToggle","hideIcon","showIcon","visible","htmlFor","iconSize","rest","inputVisibility","setInputVisibility","classnames","addonType","renderIcon","defaultProps"],"mappings":"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","file":"static/js/209.d876e000.chunk.js","sourcesContent":["// Api Url\nexport const apiUrl = process.env.REACT_APP_API_ENDPOINT\n\n// ** Auth Endpoints\nexport default {\n  loginEndpoint: '/jwt/login',\n  registerEndpoint: '/jwt/register',\n  refreshEndpoint: '/jwt/refresh-token',\n  logoutEndpoint: '/jwt/logout',\n  tuckShopLoginEndpoint: `${apiUrl}/login`,\n\n  // ** This will be prefixed in authorization header with token\n  // ? e.g. Authorization: Bearer <token>\n  tokenType: 'Bearer',\n\n  // ** Value of this property will be used as key to store JWT token in storage\n  storageTokenKeyName: 'accessToken',\n  storageRefreshTokenKeyName: 'refreshToken'\n}\n","// ** Core JWT Import\nimport useJwt from '@src/@core/auth/jwt/useJwt'\n\nconst { jwt } = useJwt({})\n\nexport default jwt\n","// ** JWT Service Import\nimport JwtService from './jwtService'\n\n// ** Export Service as useJwt\nexport default function useJwt(jwtOverrideConfig) {\n  const jwt = new JwtService(jwtOverrideConfig)\n\n  return {\n    jwt\n  }\n}\n","import axios from 'axios'\nimport jwtDefaultConfig from './jwtDefaultConfig'\n\nexport default class JwtService {\n  // ** jwtConfig <= Will be used by this service\n  jwtConfig = { ...jwtDefaultConfig }\n\n  // ** For Refreshing Token\n  isAlreadyFetchingAccessToken = false\n\n  // ** For Refreshing Token\n  subscribers = []\n\n  constructor(jwtOverrideConfig) {\n    this.jwtConfig = { ...this.jwtConfig, ...jwtOverrideConfig }\n\n    // ** Request Interceptor\n    axios.interceptors.request.use(\n      config => {\n        // ** Get token from localStorage\n        const accessToken = this.getToken()\n\n        // ** If token is present add it to request's Authorization Header\n        if (accessToken) {\n          // ** eslint-disable-next-line no-param-reassign\n          config.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n        }\n        return config\n      },\n      error => Promise.reject(error)\n    )\n\n    // ** Add request/response interceptor\n    axios.interceptors.response.use(\n      response => response,\n      error => {\n        // ** const { config, response: { status } } = error\n        const { config, response } = error\n        const originalRequest = config\n\n        // ** if (status === 401) {\n        if (response && response.status === 401) {\n          if (!this.isAlreadyFetchingAccessToken) {\n            this.isAlreadyFetchingAccessToken = true\n            this.refreshToken().then(r => {\n              this.isAlreadyFetchingAccessToken = false\n\n              // ** Update accessToken in localStorage\n              this.setToken(r.data.accessToken)\n              this.setRefreshToken(r.data.refreshToken)\n\n              this.onAccessTokenFetched(r.data.accessToken)\n            })\n          }\n          const retryOriginalRequest = new Promise(resolve => {\n            this.addSubscriber(accessToken => {\n              // ** Make sure to assign accessToken according to your response.\n              // ** Check: https://pixinvent.ticksy.com/ticket/2413870\n              // ** Change Authorization header\n              originalRequest.headers.Authorization = `${this.jwtConfig.tokenType} ${accessToken}`\n              resolve(this.axios(originalRequest))\n            })\n          })\n          return retryOriginalRequest\n        }\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  onAccessTokenFetched(accessToken) {\n    this.subscribers = this.subscribers.filter(callback => callback(accessToken))\n  }\n\n  addSubscriber(callback) {\n    this.subscribers.push(callback)\n  }\n\n  getToken() {\n    return localStorage.getItem(this.jwtConfig.storageTokenKeyName)\n  }\n\n  getRefreshToken() {\n    return localStorage.getItem(this.jwtConfig.storageRefreshTokenKeyName)\n  }\n\n  setToken(value) {\n    localStorage.setItem(this.jwtConfig.storageTokenKeyName, value)\n  }\n\n  setRefreshToken(value) {\n    localStorage.setItem(this.jwtConfig.storageRefreshTokenKeyName, value)\n  }\n\n  // login(...args) {\n  //   return axios.post(this.jwtConfig.loginEndpoint, ...args)\n  // }\n\n  login(...args) {\n    return axios.post(this.jwtConfig.tuckShopLoginEndpoint, ...args)\n  }\n\n  register(...args) {\n    return axios.post(this.jwtConfig.registerEndpoint, ...args)\n  }\n\n  refreshToken() {\n    return axios.post(this.jwtConfig.refreshEndpoint, {\n      refreshToken: this.getRefreshToken()\n    })\n  }\n}\n","import { useState, useContext, Fragment } from 'react'\nimport Avatar from '@components/avatar'\nimport Logo from '../../../assets/images/logo/favicon.png'\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\nimport { useDispatch } from 'react-redux'\nimport { toast, Slide } from 'react-toastify'\nimport { handleLogin } from '@store/actions/auth'\nimport { AbilityContext } from '@src/utility/context/Can'\nimport { Link, useHistory } from 'react-router-dom'\nimport InputPasswordToggle from '@components/input-password-toggle'\nimport { getHomeRouteForLoggedInUser } from '@utils'\nimport { Facebook, Twitter, Mail, GitHub, HelpCircle, Coffee } from 'react-feather'\nimport { AvForm, AvInput } from 'availity-reactstrap-validation-safe'\nimport {\n  Alert,\n  Row,\n  Col,\n  CardTitle,\n  CardText,\n  FormGroup,\n  Label,\n  CustomInput,\n  Button,\n  Spinner,\n  UncontrolledTooltip\n} from 'reactstrap'\n\nimport '@styles/base/pages/page-auth.scss'\n\nconst ToastContentValid = ({ name, role }) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n        <h6 className='toast-title font-weight-bold'>Welcome, {name}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span>You have successfully logged in as an {role} user to Appia. Now you can start to explore. Enjoy!</span>\n    </div>\n  </Fragment>\n)\n\nconst ToastContentNotVerified = ({ name, role }) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n        <h6 className='toast-title font-weight-bold'>Welcome, {name}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span>You have successfully logged in as an {role} user to Appia. Kindly change your password to continue. Thank you!</span>\n    </div>\n  </Fragment>\n)\n\n\nconst InvalidLoginToastContent = ({ message }) => (\n  <Fragment>\n    <div className='toastify-header'>\n      <div className='title-wrapper'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n        <h6 className='toast-title font-weight-bold'>{message}</h6>\n      </div>\n    </div>\n    <div className='toastify-body'>\n      <span>Pls, reconfirm login credentials</span>\n    </div>\n  </Fragment>\n)\n\n\nconst Login = props => {\n  const [skin, setSkin] = useSkin()\n  const ability = useContext(AbilityContext)\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const [email, setEmail] = useState('adelugba.emma@gmail.com')\n  const [password, setPassword] = useState('000000')\n  const [isSubmitting, setIsSubmitting] = useState(false)\n\n  const illustration = skin === 'dark' ? 'wexford-banner-1.jpg' : 'wexford-banner-1.jpg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const handleSubmit = async (event, errors) => {\n    if (errors && !errors.length) {\n      setIsSubmitting(true)\n      await useJwt\n        .login({ email, password })\n        .then(res => {\n          if (res.data.success) {\n            const data = {\n              ...res.data.admin,\n              accessToken: res.data.token,\n              refreshToken: res.data.token,\n              ability: [{ action: \"manage\", subject: \"all\" }],\n              avatar: \"/demo/Appia-react-admin-dashboard-template/demo-1/static/media/avatar-s-11.1d46cc62.jpg\",\n              extras: { eCommerceCartItemsCount: 5 }\n            }\n            console.log('data', data)\n            dispatch(handleLogin(data))\n            ability.update(data.ability)\n            history.push(getHomeRouteForLoggedInUser('admin'))\n            toast.success(\n              <ToastContentValid name={`${data.firstName} ${data.lastName}` || data.fullName || data.username || 'John Doe'} role={data.role || 'admin'} />,\n              { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n            )\n          } else {\n            toast.error(\n              <InvalidLoginToastContent message={`${res.data.message}` || 'Invalid Login'} />,\n              { transition: Slide, hideProgressBar: true, autoClose: 2000 }\n            )\n            setIsSubmitting(false)\n          }\n        })\n        .catch(err => { console.log(err); setIsSubmitting(false) })\n    }\n  }\n\n\n  return (\n    <div className='auth-wrapper auth-v2'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <img src={Logo} width='40' />\n          <h2 className='brand-text text-primary ml-1'>TuckShop</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-1' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} width=\"100%\"alt='Login V2' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='font-weight-bold mb-1'>\n              Welcome to TuckShop 👋\n            </CardTitle>\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            <AvForm className='auth-login-form mt-2' onSubmit={handleSubmit}>\n              <FormGroup>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <AvInput\n                  required\n                  autoFocus\n                  type='email'\n                  value={email}\n                  id='login-email'\n                  name='login-email'\n                  placeholder='john@example.com'\n                  onChange={e => setEmail(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                  <Link to='/forgot-password'>\n                    <small>Forgot Password?</small>\n                  </Link>\n                </div>\n                <InputPasswordToggle\n                  required\n                  tag={AvInput}\n                  value={password}\n                  id='login-password'\n                  name='login-password'\n                  autoComplete='on'\n                  className='input-group-merge'\n                  onChange={e => setPassword(e.target.value)}\n                />\n              </FormGroup>\n              <FormGroup>\n                <CustomInput type='checkbox' className='custom-control-Primary' id='remember-me' label='Remember Me' />\n              </FormGroup>\n              <Button.Ripple color='primary' block disabled={isSubmitting}>\n                {isSubmitting && <Spinner color='white' size='sm' />}\n                <span className='ml-50'>Sign In</span>\n              </Button.Ripple>\n            </AvForm>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Login","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\nimport { InputGroup, InputGroupAddon, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = props => {\n  // ** Props\n  const { label, hideIcon, showIcon, visible, className, htmlFor, placeholder, iconSize, ...rest } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? <Label for={htmlFor}>{label}</Label> : null}\n      <InputGroup\n        className={classnames({\n          [className]: className\n        })}\n      >\n        <Input\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupAddon addonType='append' onClick={() => setInputVisibility(!inputVisibility)}>\n          <InputGroupText className='cursor-pointer'>{renderIcon()}</InputGroupText>\n        </InputGroupAddon>\n      </InputGroup>\n    </Fragment>\n  )\n}\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  label(props, propName, componentName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName, componentName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}