{"version":3,"sources":["views/appia/allRewardItems/store/action/history.js","navigation/vertical/rewards.js","views/appia/allRewardItems/view/DeleteReward.js","views/appia/allRewardItems/view/PlanCard.js","views/appia/allRewardItems/view/AllRewardInfo.js","views/appia/allRewardItems/view/HistoryList/RestoreReward.js","views/appia/allRewardItems/view/HistoryList/columns.js","views/appia/allRewardItems/view/HistoryList/index.js","views/appia/allRewardItems/view/index.js","views/appia/allRewardItems/store/action/index.js"],"names":["getAllHistoryData","dispatch","a","apiRequest","url","method","response","data","success","type","console","log","error","swal","getFilteredHistoryData","rewards","params","q","perPage","page","queryLowered","toLowerCase","filteredData","filter","reward","name","includes","paginateArray","totalPages","length","DeleteRewardSchema","Yup","shape","reward_id","required","DeleteReward","selectedReward","useDispatch","useState","formModal","setFormModal","Button","Ripple","className","color","outline","block","onClick","Modal","isOpen","toggle","ModalHeader","initialValues","id","validationSchema","onSubmit","values","setSubmitting","body","JSON","stringify","message","getAllData","errors","touched","isSubmitting","ModalBody","FormGroup","htmlFor","placeholder","component","ModalFooter","disabled","Spinner","size","PlanCard","Card","CardHeader","CardBody","DataPlanInfo","Row","Col","xl","lg","CardText","tag","qty","coin","data_plan_id","value","toLocaleString","style","currency","status","src","image","width","borderRadius","RestoreReward","useParams","useSelector","state","appiaDeletedRewards","statusObj","pending","active","inactive","columns","minWidth","selector","sortable","cell","row","Badge","alt","pill","moment","created_at","format","DataPlansPlist","store","searchTerm","setSearchTerm","currentPage","setCurrentPage","rowsPerPage","setRowsPerPage","label","currentStatus","setUserData","useEffect","allData","isUserLoggedIn","parse","localStorage","getItem","item","CardTitle","sm","Label","for","Input","onChange","e","val","target","CustomInput","parseInt","currentTarget","padding","backgroundPosition","noHeader","pagination","subHeader","responsive","paginationServer","sortIcon","paginationComponent","count","Math","ceil","previousLabel","nextLabel","pageCount","activeClassName","forcePage","onPageChange","selected","handlePagination","pageClassName","nextLinkClassName","nextClassName","previousClassName","previousLinkClassName","pageLinkClassName","containerClassName","filters","isFiltered","Object","keys","some","k","slice","dataToRender","RewardView","props","appiaAllRewards","undefined","md","AllRewardInfo","HistoryList","Alert","to","getFilteredData","role","getReward","find","i","getAllServiceId"],"mappings":"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","file":"static/js/178.1157f726.chunk.js","sourcesContent":["import { paginateArray, sortCompare, apiRequest, swal } from '@utils'\nimport rewards from '../../../../../navigation/vertical/rewards'\n\n// ** Get all reward Data\nexport const getAllHistoryData = () => {\n    return async dispatch => {\n      const response = await apiRequest({ url: '/admin/rewards/deleted', method: 'GET' }, dispatch)\n      if (response) {\n        if (response.data.data && response.data.success) {\n          await dispatch({\n            type: 'GET_ALL_HISTORY',\n            data: response.data.data\n          })\n        } else {\n          console.log(response.error)\n        }\n      } else {\n        swal('Oops!', 'Somthing went wrong with your network.', 'error')\n      }\n  \n    }\n  }\n  \n  // ** Get filtered reward data on page or row change\n  export const getFilteredHistoryData = (rewards, params) => {\n    return async dispatch => {\n      const { q = '', perPage = 10, page = 1} = params\n  \n      /* eslint-disable  */\n      const queryLowered = q.toLowerCase()\n      const filteredData = rewards?.filter(\n        reward =>\n          (reward.name.toLowerCase().includes(queryLowered) || reward.type.toLowerCase().includes(queryLowered))\n      )\n      /* eslint-enable  */\n  \n      dispatch({\n        type: 'GET_FILTERED_HISTORY',\n        data: paginateArray(filteredData, perPage, page),\n        totalPages: filteredData?.length,\n        params\n      })\n    }\n  }\n\n  export const getHistory = (rewards, id) => {\n    return async dispatch => {\n      const history = rewards?.find(i => i?.id === id)\n      dispatch({\n        type: 'GET_HISTORY',\n        selectedHistory: history\n      })\n    }\n  }\n  ","import { Users, Award, ThumbsUp, Mail, User, List } from 'react-feather'\n\nexport default [\n    {\n        id: 'rewards',\n        title: 'Rewards',\n        icon: <Award size={20} />,\n        badge: 'light-warning',\n        badgeText: '3',\n        children: [\n            {\n                id: 'dataPlan',\n                title: 'Data Plan',\n                icon: <User size={20} />,\n                navLink: '/appia/dataPlans/list'\n            },\n            {\n                id: 'rewardItems',\n                title: 'Reward Items',\n                icon: <Award size={20} />,\n                navLink: '/appia/allRewardItems/list'\n            },\n            {\n                id: 'claimedRewards',\n                title: 'Claimed Rewards',\n                icon: <User size={20} />,\n                navLink: '/appia/claimedRewards/list'\n            }\n        ]\n    }\n]\n","import { useState } from 'react'\nimport { getAllData } from '../store/action'\nimport { getAllHistoryData } from '../store/action/history'\nimport { Button, Spinner, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup } from 'reactstrap'\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\nimport * as Yup from 'yup'\nimport { useDispatch } from 'react-redux'\nimport { swal, apiRequest } from '@utils'\n\n\nconst DeleteRewardSchema = Yup.object().shape({\n  reward_id: Yup.string().required(\"required\")\n})\n\nexport const DeleteReward = ({selectedReward}) => {\n  const dispatch = useDispatch()\n  const [formModal, setFormModal] = useState(false)\n\n\n  return (\n    <div>\n      <Button.Ripple className='text-center mb-1' color='danger' outline block onClick={() => setFormModal(!formModal)}>\n        Delete Reward\n      </Button.Ripple>\n      <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\n          <ModalHeader toggle={() => setFormModal(!formModal)}>Delete Reward</ModalHeader>\n          <Formik\n            initialValues={{\n              reward_id: selectedReward?.id\n            }}\n            validationSchema={DeleteRewardSchema}\n            onSubmit={async (values, { setSubmitting }) => {\n              const body = JSON.stringify(values)\n              try {\n                const response = await apiRequest({ url: '/admin/rewards/delete', method: 'POST', body }, dispatch)\n                if (response) {\n                  if (response.data.success) {\n                    swal('Great job!', response.data.message, 'success')\n                    dispatch(getAllData())\n                    dispatch(getAllHistoryData())\n                  } else {\n                    swal('Oops!', response.data.message, 'error')\n                  }\n                } else {\n                  swal('Oops!', 'Something went wrong with your network.', 'error')\n                }\n\n              } catch (error) {\n                console.error({ error })\n              }\n              setSubmitting(false)\n              setFormModal(!formModal)\n            }}\n          >\n\n            {({ errors, touched, isSubmitting }) => (\n              <Form>\n                <ModalBody>\n                  <FormGroup>\n                    <label htmlFor='reward_id'>Reward Id</label>\n                    <Field\n                      type='number'\n                      name='reward_id'\n                      placeholder='reward id'\n                      className={`form-control ${errors.reward_id && touched.reward_id && 'is-invalid'}`}\n                    />\n                    <ErrorMessage name='reward_id' component='div' className='field-error text-danger' />\n                  </FormGroup>\n                </ModalBody>\n                <ModalFooter>\n                  <Button.Ripple color='primary' type='submit' disabled={isSubmitting}>\n                    {isSubmitting && <Spinner color='white' size='sm' />}\n                    <span className='ml-50'>Delete Reward</span>\n                  </Button.Ripple>\n                </ModalFooter>\n              </Form>\n            )}\n          </Formik>\n        </Modal>\n    </div>\n  )\n}\n\n","import { useState } from 'react'\n// ** Reactstrap\nimport { Card, CardHeader, CardBody, Badge, UncontrolledTooltip, Button } from 'reactstrap'\n\nimport { DeleteReward } from './DeleteReward'\nimport { store } from '@store/storeConfig/store'\n\n\nconst PlanCard = ({ selectedReward }) => {\n\n  // state\n  const [toggleButton, setToggleButton] = useState(false)\n\n  // ** Function to toggle sidebar\n  const openButton = () => setToggleButton(!toggleButton)\n\n  return (\n    <Card className='plan-card border-primary'>\n      <CardHeader className='d-flex justify-content-between align-items-center pt-75 pb-1'>\n        <h5 className='mb-0'>Actions</h5>\n      </CardHeader>\n      <CardBody>\n          <DeleteReward selectedReward={selectedReward} />\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default PlanCard\n","// ** Custom Components\nimport moment from 'moment'\n\n// ** Third Party Components\nimport { Card, CardBody, CardText, Button, Row, Col } from 'reactstrap'\nimport { DollarSign, TrendingUp, User, Check, Star, Flag, Phone, BarChart, Key, Layers, Clock, Pocket, Award, Camera } from 'react-feather'\n\nconst DataPlanInfo = ({ selectedReward }) => {\n\n\n  return (\n    <Card>\n      <CardBody>\n        <Row>\n          <Col xl='6' lg='12' className='mt-2 mt-xl-0'>\n            <div className='user-info-wrapper'>\n              <div className='d-flex flex-wrap align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <div className='color-box bg-light-primary'>\n                    <Layers className='text-primary' />\n                  </div>\n                  <CardText tag='span' className='user-info-title text-capitalize font-weight-bold mb-0 ml-1'>\n                    Reward\n                  </CardText>\n                </div>\n                <CardText className='text-capitalize mb-0'>\n                  {selectedReward.name}\n                </CardText>\n              </div>\n              <div className='d-flex flex-wrap align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <div className='color-box bg-light-secoundary'>\n                    <Award className='text-secoundary' />\n                  </div>\n                  <CardText tag='span' className='user-info-title font-weight-bold mb-0 ml-1'>\n                    Reward Type\n                  </CardText>\n                </div>\n                <CardText className='mb-0'>\n                  {selectedReward.type}\n                </CardText>\n              </div>\n              <div className='d-flex flex-wrap align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <div className='color-box bg-light-secoundary'>\n                    <Pocket className='text-secoundary' />\n                  </div>\n                  <CardText tag='span' className='user-info-title font-weight-bold mb-0 ml-1'>\n                    Quantity\n                  </CardText>\n                </div>\n                <CardText className='text-capitalize mb-0'>\n                  {selectedReward?.qty}\n                </CardText>\n              </div>\n              <div className='d-flex flex-wrap align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <div className='color-box bg-light-secoundary'>\n                    <Star className='text-secoundary' />\n                  </div>\n                  <CardText tag='span' className='user-info-title font-weight-bold mb-0 ml-1'>\n                    Coin Value\n                  </CardText>\n                </div>\n                <CardText className='text-capitalize mb-0'>\n                  {selectedReward?.coin}\n                </CardText>\n              </div>\n            </div>\n          </Col>\n          <Col xl='6' lg='12' className='mt-2 mt-xl-0'>\n            <div className='user-info-wrapper'>\n              <div className='d-flex flex-wrap align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <div className='color-box bg-light-secoundary'>\n                    <Key className='text-secoundary' />\n                  </div>\n                  <CardText tag='span' className='user-info-title font-weight-bold mb-0 ml-1'>\n                    Plan Id\n                  </CardText>\n                </div>\n                <CardText className='text-capitalize mb-0'>\n                  {selectedReward?.data_plan_id}\n                </CardText>\n              </div>\n              <div className='d-flex flex-wrap align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <div className='color-box bg-light-secoundary'>\n                    <Pocket className='text-secoundary' />\n                  </div>\n                  <CardText tag='span' className='user-info-title font-weight-bold mb-0 ml-1'>\n                    Naira Value\n                  </CardText>\n                </div>\n                <CardText className='text-capitalize mb-0'>\n                  {selectedReward?.value?.toLocaleString('en-US', { style: 'currency', currency: 'NGN' })}\n                </CardText>\n              </div>\n              <div className='d-flex flex-wrap align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <div className='color-box bg-light-secoundary'>\n                    <Check className='text-secoundary' />\n                  </div>\n                  <CardText tag='span' className='user-info-title font-weight-bold mb-0 ml-1'>\n                    Reward Status\n                  </CardText>\n                </div>\n                <CardText className='text-capitalize mb-0'>\n                  {selectedReward?.status}\n                </CardText>\n              </div>\n              <div className='d-flex flex-wrap align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <div className='color-box bg-light-secoundary'>\n                    <Camera className='text-secoundary' />\n                  </div>\n                  <CardText tag='span' className='user-info-title font-weight-bold mb-0 ml-1'>\n                    Reward Image\n                  </CardText>\n                </div>\n                <img src={selectedReward?.image} width=\"80px\" style={{ borderRadius: '50px' }} />\n              </div>\n            </div>\n          </Col>\n        </Row>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default DataPlanInfo\n","import { useState, useEffect } from 'react'\nimport { useParams} from 'react-router-dom'\nimport { getAllHistoryData } from '../../store/action/history'\nimport { getAllData } from '../../store/action/index'\nimport { Button, Spinner, Modal, ModalHeader, ModalBody, ModalFooter, FormGroup } from 'reactstrap'\nimport { Formik, Field, Form, ErrorMessage } from 'formik'\nimport * as Yup from 'yup'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { swal, apiRequest } from '@utils'\n\n\nconst DeleteRewardSchema = Yup.object().shape({\n  reward_id: Yup.string().required(\"required\")\n})\n\n\nconst RestoreReward = () => {\n    const dispatch = useDispatch(),\n    { id } = useParams()\n  const store = useSelector(state => state.appiaDeletedRewards)\n\n    const [formModal, setFormModal] = useState(false)\n    \n    return (\n      <div>\n        <Button.Ripple className='text-center mb-1 mt-1' color='success' outline onClick={() => setFormModal(!formModal)}>\n          Restore Reward\n        </Button.Ripple>\n        <Modal isOpen={formModal} toggle={() => setFormModal(!formModal)} className='modal-dialog-centered'>\n            <ModalHeader toggle={() => setFormModal(!formModal)}> Restore Reward</ModalHeader>\n            <Formik\n              initialValues={{\n                reward_id: \"\"\n              }}\n              validationSchema={DeleteRewardSchema}\n              onSubmit={async (values, { setSubmitting }) => {\n                const body = JSON.stringify(values)\n                try {\n                  const response = await apiRequest({ url: '/admin/rewards/restore', method: 'POST', body }, dispatch)\n                  if (response) {\n                    if (response.data.success) {\n                      swal('Great job!', response.data.message, 'success')\n                      dispatch(getAllHistoryData())\n                      dispatch(getAllData())\n                    } else {\n                      swal('Oops!', response.data.message, 'error')\n                    }\n                  } else {\n                    swal('Oops!', 'Something went wrong with your network.', 'error')\n                  }\n  \n                } catch (error) {\n                  console.error({ error })\n                }\n                setSubmitting(false)\n                setFormModal(!formModal)\n              }}\n            >\n  \n              {({ errors, touched, isSubmitting }) => (\n                <Form>\n                  <ModalBody>\n                    <FormGroup>\n                      <label htmlFor='reward_id'>Reward Id</label>\n                      <Field\n                        type='number'\n                        name='reward_id'\n                        placeholder='reward id'\n                        className={`form-control ${errors.reward_id && touched.reward_id && 'is-invalid'}`}\n                      />\n                      <ErrorMessage name='reward_id' component='div' className='field-error text-danger' />\n                    </FormGroup>\n                  </ModalBody>\n                  <ModalFooter>\n                    <Button.Ripple color='primary' type='submit' disabled={isSubmitting}>\n                      {isSubmitting && <Spinner color='white' size='sm' />}\n                      <span className='ml-50'>Restore Reward</span>\n                    </Button.Ripple>\n                  </ModalFooter>\n                </Form>\n              )}\n            </Formik>\n          </Modal>\n      </div>\n    )\n  }\n  export default RestoreReward","// ** React Imports\nimport { Link } from 'react-router-dom'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { getReward } from '../../store/action'\nimport moment from 'moment'\nimport { store } from '@store/storeConfig/store'\nimport RestoreReward from './RestoreReward'\n\n// ** Third Party Components\nimport { Badge, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap'\nimport { Slack, User, Settings, Database, Edit, MoreVertical, FileText, Trash2, Archive } from 'react-feather'\n\nconst statusObj = {\n  pending: 'light-warning',\n  active: 'light-success',\n  inactive: 'light-danger'\n}\n\nexport const columns = [\n  {\n    name: 'Image',\n    minWidth: '40px',\n    selector: 'image',\n    sortable: true,\n    cell: row => (\n      <Badge>\n        <img src={row.image} width=\"30px\" alt=\"\"/>\n      </Badge>\n    )\n  },\n  {\n    name: 'Reward Id',\n    minWidth: '140px',\n    selector: 'id',\n    sortable: true,\n    cell: row => row.id\n  },\n  {\n    name: 'Name',\n    minWidth: '200px',\n    selector: 'name',\n    sortable: true,\n    cell: row => (\n      <div className='d-flex justify-content-left align-items-center'>\n        <div className='d-flex flex-column'>\n            <span className='font-weight-bold'>{row.name}</span>\n        </div>\n      </div>\n    )\n  },\n  {\n    name: 'Quantity',\n    minWidth: '100px',\n    selector: 'qty',\n    sortable: true,\n    cell: row => row.qty\n  },\n  {\n    name: 'Value',\n    minWidth: '172px',\n    selector: 'value',\n    sortable: true,\n    cell: row => row?.value?.toLocaleString('en-US', { style: 'currency', currency: 'NGN' })\n  },\n  {\n    name: 'Type',\n    minWidth: '138px',\n    selector: 'price',\n    sortable: true,\n    cell: row => row.type\n  },\n  {\n    name: 'Status',\n    minWidth: '100px',\n    selector: 'status',\n    sortable: true,\n    cell: row => (\n      <Badge className='text-capitalize' color={statusObj[row.status]} pill>\n        {row.status}\n      </Badge>\n    )\n  },\n  {\n    name: 'Date',\n    minWidth: '200px',\n    selector: 'created_at',\n    sortable: true,\n    cell: row => moment(row.created_at).format('lll')\n  },\n  {\n    name: 'Actions',\n    minWidth: '200px',\n    selector: 'fullName',\n    sortable: true,\n    cell: row => (\n      <RestoreReward />\n    )\n  }\n]\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Columns\nimport { columns } from './columns'\n\n// ** Store & Actions\nimport { getAllHistoryData, getFilteredHistoryData } from '../../store/action/history'\nimport { useDispatch, useSelector } from 'react-redux'\n\n// ** Third Party Components\nimport Select from 'react-select'\nimport ReactPaginate from 'react-paginate'\nimport { ChevronDown } from 'react-feather'\nimport DataTable from 'react-data-table-component'\nimport { selectThemeColors, isUserLoggedIn } from '@utils'\nimport { Card, CardHeader, CardTitle, CardBody, Input, Row, Col, Label, CustomInput, Button } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/libs/react-select/_react-select.scss'\nimport '@styles/react/libs/tables/react-dataTable-component.scss'\nimport FormGroup from 'reactstrap/lib/FormGroup'\n\nconst DataPlansPlist = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.appiaDeletedRewards)\n\n  // ** States\n  const [searchTerm, setSearchTerm] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n  const [rowsPerPage, setRowsPerPage] = useState(10)\n  const [currentStatus, setCurrentStatus] = useState({ value: '', label: 'Select Status'})\n  const [userData, setUserData] = useState(null)\n\n\n  // ** Get data on mount\n  useEffect(() => {\n    dispatch(getAllHistoryData())\n    dispatch(\n      getFilteredHistoryData(store.allData, {\n        page: currentPage,\n        perPage: rowsPerPage,\n        status: currentStatus.value,\n        q: searchTerm\n      })\n    )\n  }, [dispatch])\n\n  useEffect(() => {\n    if (isUserLoggedIn() !== null) {\n      setUserData(JSON.parse(localStorage.getItem('userData')))\n    }\n  }, [])\n\n  const statusOptions = [\n    { value: '', label: 'Select Status'},\n    { value: 'pending', label: 'Pending'},\n    { value: 'active', label: 'Active'},\n    { value: 'inactive', label: 'Inactive'}\n  ]\n\n  // ** Function in get data on page change\n  const handlePagination = page => {\n    dispatch(\n      getFilteredHistoryData(store.allData, {\n        page: page.selected + 1,\n        perPage: rowsPerPage,\n        status: currentStatus.value,\n        q: searchTerm\n      })\n    )\n    setCurrentPage(page.selected + 1)\n  }\n\n  // ** Function in get data on rows per page\n  const handlePerPage = e => {\n    const value = parseInt(e.currentTarget.value)\n    dispatch(\n      getFilteredHistoryData(store.allData, {\n        page: currentPage,\n        perPage: value,\n        status: currentStatus.value,\n        q: searchTerm\n      })\n    )\n    setRowsPerPage(value)\n  }\n\n  // ** Function in get data on search query change\n  const handleFilter = val => {\n    setSearchTerm(val)\n    dispatch(\n      getFilteredHistoryData(store.allData, {\n        page: currentPage,\n        perPage: rowsPerPage,\n        status: currentStatus.value,\n        q: val\n      })\n    )\n  }\n\n  const filteredData = store?.allData?.filter(\n    item => (item.name.toLowerCase() || item.type.toLowerCase())\n  )\n\n    // ** Custom Pagination\n  const CustomPagination = () => {\n    const count = Math.ceil(filteredData.length / rowsPerPage)\n\n    return (\n      <ReactPaginate\n        previousLabel={''}\n        nextLabel={''}\n        pageCount={count || 1}\n        activeClassName='active'\n        forcePage={currentPage !== 0 ? currentPage - 1 : 0}\n        onPageChange={page => handlePagination(page)}\n        pageClassName={'page-item'}\n        nextLinkClassName={'page-link'}\n        nextClassName={'page-item next'}\n        previousClassName={'page-item prev'}\n        previousLinkClassName={'page-link'}\n        pageLinkClassName={'page-link'}\n        containerClassName={'pagination react-paginate justify-content-end my-2 pr-1'}\n      />\n    )\n  }\n\n\n  // ** Table data to render\n  const dataToRender = () => {\n    const filters = {\n      status: currentStatus.value,\n      q: searchTerm\n    }\n\n    const isFiltered = Object.keys(filters).some(function (k) {\n      return filters[k].length > 0\n    })\n\n    if (store.data.length > 0) {\n      return store.data\n    } else if (store.data.length === 0 && isFiltered) {\n      return []\n    } else {\n      return store.allData.slice(0, rowsPerPage)\n    }\n  }\n\n  return (\n    <Fragment>\n      <Card>\n        <CardHeader>\n          <CardTitle tag='h4'>Search Filter</CardTitle>\n        </CardHeader>\n        <CardBody>\n          <Row>\n          {/* <Col lg='4' md='6'>\n              <FormGroup>\n                <Label for='select'>Select Status:</Label>\n                <Select\n                  theme={selectThemeColors}\n                  isClearable={false}\n                  className='react-select'\n                  classNamePrefix='select'\n                  id='select'\n                  options={statusOptions}\n                  value={currentStatus}\n                  onChange={data => {\n                    setCurrentStatus(data)\n                    dispatch(\n                      getFilteredData(store.allData, {\n                        page: currentPage,\n                        perPage: rowsPerPage,\n                        status: data.value,\n                        q: searchTerm\n                      })\n                    )\n                  }}\n                />\n              </FormGroup>\n            </Col> */}\n          <Col lg='4' sm='6'>\n          <FormGroup>\n          <Label for='search-invoice'>Search:</Label>\n              <Input\n                id='search-invoice'\n                type='text'\n                value={searchTerm}\n                onChange={e => handleFilter(e.target.value)}\n              />\n          </FormGroup>\n          </Col>\n          </Row>\n        </CardBody>\n      </Card>\n      <Card>\n      <Row className='mx-0 mt-3'>\n          <Col sm='6'>\n            <div className='d-flex align-items-center'>\n              <Label for='rows-per-page'>Show</Label>\n              <CustomInput\n                className='form-control mx-50'\n                type='select'\n                id='rows-per-page'\n                value={rowsPerPage}\n                onChange={handlePerPage}\n                style={{\n                  width: '10rem',\n                  padding: '0 0.8rem',\n                  backgroundPosition: 'calc(100% - 3px) 11px, calc(100% - 20px) 13px, 100% 0'\n                }}\n              >\n                <option value='10'>10</option>\n                <option value='25'>25</option>\n                <option value='50'>50</option>\n              </CustomInput>\n              <Label for='rows-per-page'>Entries</Label>\n            </div>\n          </Col>\n        </Row>\n        <DataTable\n          noHeader\n          pagination\n          subHeader\n          responsive\n          paginationServer\n          columns={columns}\n          sortIcon={<ChevronDown />}\n          className='react-dataTable'\n          paginationComponent={CustomPagination}\n          data={dataToRender()}\n          // subHeaderComponent={\n          //   <CustomHeader\n          //     handlePerPage={handlePerPage}\n          //     rowsPerPage={rowsPerPage}\n          //     searchTerm={searchTerm}\n          //     handleFilter={handleFilter}\n          //   />\n          // }\n        />\n      </Card>\n    </Fragment>\n  )\n}\n\nexport default DataPlansPlist\n","// ** React Imports\nimport { useEffect, useState } from 'react'\nimport { useParams, Link } from 'react-router-dom'\nimport moment from 'moment'\n\n// ** Store & Actions\nimport { useSelector, useDispatch } from 'react-redux'\nimport { isUserLoggedIn } from '@utils'\n\n// ** Reactstrap\nimport { Row, Col, Alert } from 'reactstrap'\n\n// ** User View Components\nimport PlanCard from './PlanCard'\nimport AllRewardInfo from './AllRewardInfo'\nimport HistoryList from './HistoryList'\n\n// ** Styles\nimport '@styles/react/apps/app-users.scss'\n\nconst RewardView = props => {\n  // ** Vars\n  const store = useSelector(state => state.appiaAllRewards),\n    dispatch = useDispatch(),\n    { id } = useParams()\n\n  const [userData, setUserData] = useState(null)\n  const [plan, setPlan] = useState(null)\n\n  useEffect(() => {\n    if (isUserLoggedIn() !== null) {\n      setUserData(JSON.parse(localStorage.getItem('userData')))\n    }\n  }, [])\n\n  return store.selectedReward !== null && store.selectedReward !== undefined ? (\n    <div className='app-user-view'>\n      <Row>\n        <Col xl='9' lg='9' md='10'>\n          <AllRewardInfo selectedReward={store.selectedReward} />\n        </Col>\n        <Col xl='3' lg='3' md='2'>\n          <PlanCard selectedReward={store.selectedReward} />\n        </Col> \n      </Row>\n        <HistoryList selectedReward={store.selectedReward} />\n    </div>\n  ) : (\n    <Alert color='danger'>\n      <h4 className='alert-heading'>Users not found</h4>\n      <div className='alert-body'>\n        Users with id: {id} doesn't exist. Check list of all Users: <Link to='/app/user/list'>Users List</Link>\n      </div>\n    </Alert>\n  )\n}\nexport default RewardView\n","import { paginateArray, sortCompare, apiRequest, swal } from '@utils'\n\n// ** Get all Data\nexport const getAllData = () => {\n  return async dispatch => {\n    const response = await apiRequest({ url: '/admin/rewards/get', method: 'GET' }, dispatch)\n    if (response) {\n      if (response.data.data && response.data.success) {\n        await dispatch({\n          type: 'GET_ALL_REWARDS',\n          data: response.data.data\n        })\n      } else {\n        console.log(response.error)\n      }\n    } else {\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n\n  }\n}\n\n// ** Get filtered data on page or row change\nexport const getFilteredData = (rewards, params) => {\n  return async dispatch => {\n    const { q = '', perPage = 10, page = 1, role = null, status = null } = params\n\n    /* eslint-disable  */\n    const queryLowered = q.toLowerCase()\n    const filteredData = rewards.filter(\n      reward =>\n        (reward.name.toLowerCase().includes(queryLowered) || reward.type.toLowerCase().includes(queryLowered)) &&\n        reward.status === (status || reward.status)\n    )\n    /* eslint-enable  */\n\n    dispatch({\n      type: 'GET_FILTERED_REWARDS',\n      data: paginateArray(filteredData, perPage, page),\n      totalPages: filteredData.length,\n      params\n    })\n  }\n}\n\nexport const getReward = (rewards, id) => {\n  return async dispatch => {\n    const reward = rewards.find(i => i.id === id)\n    dispatch({\n      type: 'GET_REWARD',\n      selectedReward: reward\n    })\n  }\n}\n\n// ** Get all service id\nexport const getAllServiceId = () => {\n  return async dispatch => {\n    const response = await apiRequest({ url: '/admin/rewards/service-id/get', method: 'GET' }, dispatch)\n    if (response) {\n      if (response.data.data && response.data.success) {\n        await dispatch({\n          type: 'GET_SERVICE_ID',\n          data: response.data.data\n        })\n      } else {\n        console.log(response.error)\n      }\n    } else {\n      swal('Oops!', 'Somthing went wrong with your network.', 'error')\n    }\n  }\n\n}\n"],"sourceRoot":""}